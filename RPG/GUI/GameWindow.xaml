<Window x:Class="GUI.GameWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:rpg="clr-namespace:RPG;assembly=RPG"
        xmlns:gui="clr-namespace:GUI"
        Title="GameWindow" WindowState="Maximized" Loaded="Window_Loaded" KeyDown="Window_KeyDown">
    <Window.Resources>
        <gui:ObjectToTypeConverter x:Key="typeConverter" />
        <!--<rpg:GameBoard x:Key="myGameBoard" PropertyChanged="gameBoard_PropertyChanged"></rpg:GameBoard>-->

        <!-- Displays the Treasre or Actor icon. -->
        <Style x:Key="CellContentStyle" TargetType="{x:Type Rectangle}">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains a knight. -->
                        <Condition Binding="{Binding Path=Content, Converter={StaticResource typeConverter}}" Value="Knight" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource KnightCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains an assassin. -->
                        <Condition Binding="{Binding Path=Content, Converter={StaticResource typeConverter}}" Value="Assassin" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource AssassinCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains an archer. -->
                        <Condition Binding="{Binding Path=Content, Converter={StaticResource typeConverter}}" Value="Archer" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource ArcherCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains a princess. -->
                        <Condition Binding="{Binding Path=Content, Converter={StaticResource typeConverter}}" Value="Princess" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource PrincessCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains a warrior. -->
                        <Condition Binding="{Binding Path=Content, Converter={StaticResource typeConverter}}" Value="Warrior" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource WarriorCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell contains a treasure. -->
                        <Condition Binding="{Binding Path=Content.Name}" Value="Treasure" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Width" Value="20"/>
                    <Setter Property="Height" Value="20"/>
                    <Setter Property="Fill" Value="{StaticResource TreasureCellContentBrush}"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Displays the appropriate cell type. -->
        <Style x:Key="CellStyle" TargetType="{x:Type Rectangle}">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell is a wall. -->
                        <Condition Binding="{Binding Path=Name}" Value="Wall" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource WallCellBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell is a floor cell. -->
                        <Condition Binding="{Binding Path=Type}" Value="Floor" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource FloorCellBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell is an outer empty space cell. -->
                        <Condition Binding="{Binding Path=Name}" Value="Space" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="Transparent"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell is a goal. -->
                        <Condition Binding="{Binding Path=Name}" Value="Goal" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource GoalCellContentBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <!-- If the cell is a goal with a treasure in it. -->
                        <Condition Binding="{Binding Path=Name}" Value="Goal" />
                        <Condition Binding="{Binding Path=CellContents.Name}" Value="Treasure" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Fill" Value="{StaticResource GoalActiveCellContentBrush}"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <!-- All cells are styled here. -->
        <Style x:Key="Cell" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <!-- The cell, -->
                            <Rectangle Width="40" Height="40" Style="{DynamicResource CellStyle}" />
                            <!-- and its content. -->
                            <Rectangle Style="{DynamicResource CellContentStyle}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
        <StackPanel MinWidth="200">
            <Button Name="Move_Button" Content="Move" Margin="0,10" Click="Move_Button_Click"/>
            <ListView Name="GameInfo_ListView">
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border MinWidth="200" CornerRadius="6" BorderBrush="Gray" Background="LightGray" BorderThickness="2">
                            <StackPanel Orientation="Vertical" Margin="0,5" HorizontalAlignment="Left" VerticalAlignment="Center">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Player's name : "/>
                                    <TextBlock Text="{Binding Path=Name}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Player's life : "/>
                                    <TextBlock Text="{Binding Path=HP}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Player's job : "/>
                                    <TextBlock Text="{Binding Path=., Converter={StaticResource typeConverter}}"/>
                                </StackPanel>
                            </StackPanel>
                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </StackPanel>
        <Viewbox Stretch="Uniform">
            <Grid x:Name="grid_Game"/>
        </Viewbox>
    </StackPanel>
</Window>
